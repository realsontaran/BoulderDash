
#include <stdlib.h>

#include  "./Lib/include/SDL.h"
#include  "./Lib/include/SDL_image.h"

#define CellSize 30

typedef enum {empty = 0,border,dirt,diamond,miner,exit_door,rock,spider,enter_door}block;

typedef struct
{
    int blockName;

    int xpos;
    int ypos;
    
    bool falling;
    SDL_Texture *tex;
    SDL_Rect src, dest;
}BLOCK;

typedef struct
{
    int levelWidth;
    int levelHeight;

    int TotalDiamond;
    int TotalTime;
    int level_life;
}LEVEL;

LEVEL current_level;

int Level[100][100];

SDL_Rect Camera = {0,0,900,600};

SDL_Rect temp = {0,0,900,600};

SDL_Texture *timer;
SDL_Texture *miner_life;
SDL_Texture *score_screen;

void changeLevel(int map[100][100],int stage[100][100])
{
    for (int row = 0; row < 100; row++)
    {
        for (int column = 0; column < 100; column++)
        {
            map[row][column] = stage[row][column];
        }
    }

    switch (map[99][99])
    {
    case 10:
        current_level.levelWidth = 1200;
        current_level.levelHeight = 600;
        current_level.TotalDiamond = 20;
        current_level.TotalTime = 40;
        current_level.level_life = 5;
        break;
    
    case 20:
        current_level.levelWidth = 1350;
        current_level.levelHeight = 750;
        current_level.TotalDiamond = 50;
        current_level.TotalTime = 80;
        current_level.level_life = 5;  
        break;
    case 30:
        current_level.levelWidth = 1500;
        current_level.levelHeight = 900;
        current_level.TotalDiamond = 110;
        current_level.level_life = 5;
        break;
    default:
        break;
    }
}

int CreateMap(int map[100][100] ,int count)
{
    int level1[100][100] = 
    {
        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
        {1,4,2,2,2,2,6,2,6,2,6,2,6,2,6,2,6,2,6,2,2,2,2,2,2,2,2,6,2,6,2,6,2,6,2,6,2,6,2,1},
        {1,2,2,6,2,2,2,2,2,2,2,6,2,6,2,6,2,2,2,2,6,2,6,2,6,6,2,6,2,2,2,2,2,2,2,2,2,2,2,1},
        {1,2,2,2,2,6,2,2,2,2,6,6,2,6,2,6,6,2,2,2,6,2,6,6,6,6,6,6,6,6,6,6,6,6,2,6,2,6,2,1},
        {1,2,2,2,2,3,2,2,6,2,6,2,2,2,6,2,2,2,2,6,2,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,2,1},
        {1,2,2,2,6,2,6,2,2,2,2,6,2,6,2,6,2,2,2,2,2,6,2,6,2,6,2,2,2,2,2,2,2,2,2,6,2,2,2,1},
        {1,2,6,2,6,2,2,3,2,2,6,2,2,2,2,6,2,2,2,2,6,2,6,2,2,2,2,2,2,6,2,6,2,6,2,2,2,2,2,1},
        {1,2,6,2,6,2,2,2,6,2,2,6,2,6,3,6,2,2,2,2,6,2,6,2,2,2,2,2,3,2,2,2,2,3,2,2,3,2,2,1},
        {1,2,2,2,2,2,2,2,6,6,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,2,6,2,6,2,2,2,2,2,2,2,2,2,1},
        {1,2,2,6,2,6,2,3,6,2,2,2,3,2,2,6,2,6,2,2,6,2,6,6,2,2,2,2,2,3,2,2,2,2,2,2,3,2,2,1},
        {1,2,6,2,2,2,2,2,2,2,6,2,2,2,2,2,6,2,6,2,6,2,2,2,2,2,2,3,2,2,2,2,3,6,2,2,2,6,2,1},
        {1,2,2,2,2,6,2,2,6,2,2,2,2,2,2,6,2,6,2,2,6,2,2,2,2,2,2,2,2,2,3,2,6,2,2,2,2,2,2,1},
        {1,2,2,2,2,2,2,2,6,2,2,2,2,3,2,2,6,6,2,2,6,6,2,6,2,2,2,2,3,2,2,2,2,2,2,3,2,2,6,1},
        {1,2,6,2,6,2,6,2,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,6,2,6,2,2,2,2,2,3,2,2,2,2,2,1},
        {1,2,2,2,2,2,6,2,2,6,6,6,2,2,2,6,2,6,2,2,6,2,2,2,2,2,2,2,2,3,2,2,6,2,6,2,6,3,2,1},
        {1,2,2,6,2,2,2,6,2,2,6,2,2,3,2,2,2,2,6,2,6,2,2,2,2,2,2,2,6,2,2,2,2,2,6,2,2,2,2,1},
        {1,2,6,2,6,6,2,6,2,2,2,2,2,2,2,6,2,6,2,2,6,6,2,2,2,2,2,2,6,2,2,2,2,2,6,2,2,2,2,1},
        {1,2,2,2,6,2,2,2,2,2,6,2,2,2,2,2,6,6,2,2,6,2,6,2,2,2,2,2,2,6,2,2,2,6,2,2,6,2,2,1},
        {1,2,2,6,2,6,2,2,6,2,2,2,2,2,2,2,2,2,2,2,6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1},
        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
    };
    level1[99][99] = 10; 

    int level2[100][100] =
    {
        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,},
        {1,4,2,2,2,6,2,2,2,6,2,2,2,2,3,2,2,6,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,6,2,2,2,6,2,2,2,1,},
        {1,2,2,2,2,6,2,2,6,6,2,2,2,6,2,2,3,2,2,2,6,2,2,2,2,2,6,6,6,2,2,6,6,6,2,2,2,2,2,3,2,6,2,6,1,},
        {1,2,2,2,2,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,2,2,6,2,3,2,2,2,2,6,6,2,2,6,2,6,2,6,2,2,2,2,1,},
        {1,2,2,2,2,2,2,3,2,2,6,2,2,2,2,2,6,2,2,2,6,2,2,2,2,2,3,2,3,2,2,2,2,2,2,2,2,6,2,3,2,2,2,2,1,},
        {1,2,2,2,2,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,2,6,6,2,2,2,2,2,6,2,2,2,2,2,6,3,2,6,2,2,2,6,1,},
        {1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,3,6,2,2,3,2,2,2,2,2,2,6,2,1,},
        {1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,6,2,2,1,},
        {1,2,2,6,3,2,2,6,6,2,6,2,2,2,2,2,3,3,2,2,2,2,2,2,3,3,2,2,6,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,},
        {1,2,2,2,2,2,2,2,3,3,2,6,2,2,2,2,6,6,2,6,2,2,6,6,6,2,2,2,2,2,2,3,2,2,3,2,3,2,2,2,2,2,2,2,1,},
        {1,2,2,6,3,2,2,2,2,2,2,6,2,2,2,2,2,2,6,2,6,3,2,2,2,2,2,6,6,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,1,},
        {1,2,6,6,2,2,2,6,6,6,2,2,2,2,6,6,6,2,6,2,2,2,6,2,2,2,6,2,2,2,6,3,2,2,2,2,2,2,2,2,2,2,2,2,1,},
        {1,2,2,2,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,},
        {1,2,2,2,2,6,6,6,2,6,2,2,3,3,2,2,3,2,2,6,6,2,2,6,6,2,2,6,6,2,2,2,3,6,2,2,2,2,2,2,2,2,2,2,1,},
        {1,2,2,3,2,2,2,3,2,3,2,2,2,2,6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,},
        {1,2,2,2,2,6,2,2,2,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,},
        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,1,},
        {1,2,2,2,2,2,2,6,2,6,2,6,2,6,2,6,2,2,2,2,2,2,2,2,6,3,2,2,3,2,2,2,2,2,2,2,3,2,6,6,6,6,2,2,1,},
        {1,2,2,2,6,6,2,6,2,2,2,2,2,6,2,2,6,2,2,6,3,2,2,2,2,6,6,2,2,2,2,2,2,2,2,2,2,2,2,6,3,2,2,2,1,},
        {1,2,6,2,2,3,2,2,2,2,2,3,2,2,2,2,2,2,6,2,2,2,3,2,6,2,2,2,2,2,2,6,3,2,2,2,2,2,2,3,2,2,2,2,1,},
        {1,6,6,6,2,2,2,6,2,2,2,6,6,2,2,6,6,2,2,6,2,2,2,2,2,2,2,2,6,6,6,6,6,6,2,2,2,6,6,6,2,2,2,2,1,},
        {1,2,2,2,2,2,6,2,2,2,2,2,2,2,2,2,6,6,2,2,2,2,6,2,2,2,2,2,2,2,2,2,2,2,6,2,6,2,6,2,2,2,2,2,1,},
        {1,2,6,2,6,2,6,2,6,3,3,6,6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,},
        {1,2,2,2,6,6,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,2,2,2,6,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,},
        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,}
    };
    level2[99][99] = 20; 

    int level3[100][100] = 
    {
        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
        {1,4,2,2,6,6,6,2,2,2,2,2,2,2,2,2,2,2,6,6,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,2,2,2,1},
        {1,2,2,2,2,2,2,2,3,2,6,2,2,2,2,2,2,2,2,6,3,3,2,6,2,2,2,2,2,2,6,6,2,2,2,2,2,2,2,2,2,2,2,2,6,2,6,2,2,1},
        {1,2,2,2,2,2,6,3,2,2,3,2,2,2,2,2,2,3,2,2,2,2,2,2,6,2,2,2,2,6,2,2,2,2,6,2,6,6,2,2,2,2,2,2,3,2,2,2,2,1},
        {1,2,6,2,2,2,6,2,6,2,2,3,2,2,2,2,2,2,2,2,2,2,6,2,6,2,3,2,2,2,2,2,2,2,3,2,3,3,6,2,2,2,6,2,2,2,2,6,2,1},
        {1,2,6,2,2,6,2,2,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,2,2,2,2,2,6,2,2,2,6,2,2,2,2,2,3,2,1},
        {1,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,6,6,2,2,3,2,2,2,2,1},
        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
        {1,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,2,2,2,2,6,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,2,3,2,1},
        {1,2,2,2,2,6,6,2,2,6,2,2,2,2,2,2,6,2,2,6,6,2,2,2,2,6,2,2,2,2,2,6,6,2,2,2,2,6,2,2,2,3,2,2,6,6,2,2,2,1},
        {1,6,2,6,2,2,2,2,2,6,2,2,6,2,2,2,6,2,2,2,2,2,2,2,2,2,6,6,2,2,2,2,2,2,2,2,6,3,2,2,2,6,2,2,2,3,6,2,2,1},
        {1,2,3,2,2,6,3,2,6,2,2,2,2,2,6,2,2,2,6,2,2,6,2,2,2,2,2,2,2,2,2,2,2,6,6,2,2,2,2,2,2,2,3,2,2,2,2,2,2,1},
        {1,2,6,2,2,3,2,2,2,2,2,6,2,2,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,3,2,2,2,2,1},
        {1,2,3,2,3,2,3,2,6,2,2,2,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1},
        {1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,2,2,6,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,1,1,1},
        {1,2,2,2,6,2,2,2,2,2,2,3,2,2,2,2,2,6,2,3,2,2,2,2,2,2,2,3,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,3,2,2,2,3,2,1},
        {1,2,2,6,6,6,6,6,2,2,2,2,2,2,6,2,2,2,2,2,2,3,2,6,2,3,2,2,2,2,2,6,2,2,2,2,2,6,2,2,6,2,2,2,3,2,2,2,2,1},
        {1,2,6,6,2,3,6,2,2,6,2,2,6,2,2,2,2,2,2,2,6,2,2,2,2,6,2,2,6,2,3,2,2,2,2,2,2,3,2,2,3,2,2,6,2,2,2,2,2,1},
        {1,2,3,2,6,2,6,6,2,2,2,6,3,2,3,2,2,2,2,2,2,2,2,2,2,2,6,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,3,2,2,2,3,2,1},
        {1,2,3,6,2,2,2,3,2,2,2,6,2,2,2,2,6,2,2,6,6,6,2,2,2,2,2,2,2,2,2,2,2,6,2,2,2,2,6,2,2,2,2,2,2,2,2,2,2,1},
        {1,2,2,3,6,2,2,6,6,2,2,2,2,6,2,2,2,3,2,3,3,2,2,2,6,6,2,2,2,2,2,6,2,2,2,3,2,2,2,2,6,2,2,6,2,2,2,2,2,1},
        {1,2,3,2,2,2,6,2,2,2,6,3,2,2,2,2,3,6,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,6,2,2,2,2,3,2,2,2,2,2,2,6,2,2,1},
        {1,1,1,1,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
        {1,6,2,2,6,2,6,6,2,2,3,2,2,6,2,3,6,2,2,2,2,2,2,6,2,2,2,6,2,2,2,2,2,2,2,2,2,6,6,2,2,2,6,2,2,3,2,6,2,1},
        {1,2,6,6,2,2,3,2,2,3,2,3,2,2,2,6,2,2,2,3,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,6,6,2,6,2,2,2,2,2,2,2,2,2,6,1},
        {1,2,2,2,6,2,6,2,2,6,2,2,2,2,2,2,2,2,3,2,2,2,3,2,2,2,3,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,6,2,2,6,2,2,1},
        {1,2,6,2,3,2,6,2,2,6,2,6,2,2,2,2,2,2,2,2,2,6,2,6,6,2,2,2,2,2,2,2,2,2,2,2,6,2,2,2,6,2,2,6,2,6,2,2,2,1},
        {1,2,6,3,2,2,2,6,2,2,2,6,2,2,2,2,6,2,2,2,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,6,2,6,2,6,2,2,6,2,2,2,2,2,1},
        {1,2,6,2,2,2,6,2,2,2,2,6,2,2,2,2,2,6,2,6,2,2,2,2,2,2,2,2,6,2,6,2,2,2,6,2,2,2,6,2,2,2,2,2,2,2,2,2,2,1},
        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
    };

    level3[99][99] = 30;

    switch (count)
    {
    case 1:
        changeLevel(map,level1);
        break;
    case 2:
        changeLevel(map,level2);
        break;
    case 3:
        changeLevel(map,level3);
    default:
        break;
    }
    return 0;
}

SDL_Texture *LoadTexture(char *filename,SDL_Renderer *ren)
{
    SDL_Surface *tempSurface = IMG_Load(filename);
    SDL_Texture *tex = SDL_CreateTextureFromSurface(ren,tempSurface);
    SDL_FreeSurface(tempSurface);
    return tex;
}

void Draw(SDL_Texture *tex, SDL_Renderer *renderer,SDL_Rect *src,SDL_Rect *dest)
{   
    SDL_RenderCopy(renderer,tex,src,dest);
}

void DrawMap(int level[100][100] ,BLOCK blocks[9] ,SDL_Renderer *renderer)
{


    blocks[border].blockName = border;
    blocks[diamond].blockName = diamond;
    blocks[dirt].blockName = dirt;
    blocks[empty].blockName = empty;
    blocks[miner].blockName = miner;
    blocks[exit_door].blockName = exit_door;
    blocks[rock].blockName = rock;
    blocks[spider].blockName = spider;
    blocks[enter_door].blockName = enter_door;

    blocks[border].tex = LoadTexture("Textures/border.bmp",renderer);
    blocks[diamond].tex = LoadTexture("Textures/diamond.bmp",renderer);
    blocks[dirt].tex = LoadTexture("Textures/dirt.bmp",renderer);
    blocks[empty].tex = LoadTexture("Textures/empty.bmp",renderer);
    blocks[miner].tex = LoadTexture("Textures/miner.bmp",renderer);
    blocks[exit_door].tex = LoadTexture("Textures/exit_door.bmp",renderer);
    blocks[rock].tex = LoadTexture("Textures/rock.bmp",renderer);
    blocks[spider].tex = LoadTexture("Textures/spider.bmp",renderer);
    blocks[enter_door].tex = LoadTexture("Textures/enter_door.bmp",renderer);

    timer = LoadTexture("Textures/time.bmp",renderer);
    miner_life = LoadTexture("Textures/heart.bmp",renderer);
    score_screen = LoadTexture("Textures/score_screen.bmp",renderer);

    int type = 0;

    SDL_Rect src,dest;

    src.h = src.w = CellSize;
    src.x = src.y = 0;

    dest.h = dest.w = CellSize;
    dest.x = dest.y = 0;

    for (int row = 0; row < 100; row++)
    {
        for (int column = 0; column < 100; column++)
        {
            type = level[row][column];

            dest.x = column *CellSize - temp.x;
            dest.y = row * CellSize - temp.y;

            switch (type)
            {
            case empty:
                blocks[empty].dest = dest;
                Draw(blocks[empty].tex,renderer,&src,&(blocks[empty].dest));
                break;
            case border:
                Draw(blocks[border].tex,renderer,&src,&dest);
                break;
            case dirt:
                Draw(blocks[dirt].tex,renderer,&src,&dest);
                break;
            case diamond:
                Draw(blocks[diamond].tex,renderer,&src,&dest);
                break;
            case miner:
                blocks[miner].dest = dest;
                Draw(blocks[miner].tex,renderer,&src,&dest);
                break;
            case exit_door:
                Draw(blocks[exit_door].tex,renderer,&src,&dest);
                break;
            case rock:
                blocks[rock].dest = dest;
                Draw(blocks[rock].tex,renderer,&src,&(blocks[rock].dest));              
                break;
            case spider:
                Draw(blocks[spider].tex,renderer,&src,&dest);
                break;
            case enter_door:
                Draw(blocks[enter_door].tex,renderer,&src,&dest);
            default:
                break;
            }

        }
    }   
}
